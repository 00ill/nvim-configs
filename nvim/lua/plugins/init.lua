return {
    -- Ïª¨Îü¨Ïä§ÌÇ¥
    -- Kanagawa ÌÖåÎßà ÏÑ§Ï†ï Î∞è Ï†ÅÏö©
    {
        'sainnhe/everforest',
        lazy = false,
        priority = 1000,
        config = function()
            -- Optionally configure and load the colorscheme
            -- directly inside the plugin declaration.
            vim.g.everforest_enable_italic = true
            vim.cmd.colorscheme('everforest')
        end
    }
    ,
    --Dashboard (ÎåÄÏãúÎ≥¥Îìú ÌîåÎü¨Í∑∏Ïù∏)
{
  "goolord/alpha-nvim",
  event = "VimEnter",
  dependencies = {
    "nvim-tree/nvim-web-devicons", -- ÏïÑÏù¥ÏΩò
    "nvim-telescope/telescope.nvim", -- ÏµúÍ∑º ÌååÏùº, ÌîÑÎ°úÏ†ùÌä∏ ÌÉêÏÉâ
    "ahmedkhalf/project.nvim", -- ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù
  },
  config = function()
    local alpha = require("alpha")
    local dashboard = require("alpha.themes.dashboard")

    -- ÏïÑÏä§ÌÇ§ ÏïÑÌä∏ Ìó§Îçî
    dashboard.section.header.val = {
        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∞‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢Ñ‚†Ä‚†Ä‚°¥‚†Å‚†à‚°Ü‚†Ä‚¢Ä‚°§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†¢‚£Ñ‚†Ä‚†Ä‚°á‚†Ä‚°ï‚†Ä‚¢∏‚†Ä‚¢†‚†É‚†Ä‚¢Æ‚†Ä‚†π‚†Ä‚†Ä‚£†‚¢æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£û‚†Ä‚¢Ä‚†á‚†Ä‚°á‚†Ä‚°∏‚†Ä‚†à‚£Ü‚†Ä‚°∏‚†Ä‚¢∞‚†Ä‚†Ä‚°á‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†ò‚¢∂‚£Ø‚£ä‚£Ñ‚°®‚†ü‚°°‚†Å‚†ê‚¢å‚†´‚¢Ö‚£¢‚£ë‚£µ‚†∂‚†Å‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£Ä‚†Ä‚¢Ä‚†í‚†í‚†Ç‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†ê‚†í‚†Ç‚°Ä‚†Ä‚£∏‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚¢Æ‚£µ‚£∂‚£¶‚°©‚°≤‚£Ñ‚†Ä‚†Ä‚£ø‚£ø‚£Ω‚†≤‚†≠‚£•‚£ñ‚£Ç‚£Ä‚£Ä‚£Ä‚£Ä‚£ê‚£¢‚°≠‚†µ‚†ñ‚£ø‚£ø‚¢´‚†Ä‚†Ä‚£†‚£ñ‚£Ø‚£∂‚£∂‚£Æ‚°∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚¢∏‚°ü‚¢â‚£â‚†ô‚£ø‚£ø‚£¶‚†Ä‚£ø‚£ø‚£ø‚£ø‚£∑‚£≤‚†∂‚†§‚†≠‚£≠‚°≠‚†≠‚†¥‚†∂‚£ñ‚£æ‚£ø‚£ø‚°ø‚¢∏‚¢Ä‚£º‚£ø‚°ø‚†ã‚£â‚†â‚¢≥‚†Å‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Æ‚£≥‚£¥‚£´‚†Ç‚†ò‚£ø‚£ø‚£á‚¢∑‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚¢É‚°ü‚£º‚£ø‚£ø‚†Å‚†∏‚£ò‚£¢‚£ö‚†ú‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†à‚¢ß‚¢ª ‚£ø‚£ø‚£ü‚†ª‚£ø‚£ø‚£ø‚£ø‚†õ‚£©‚£ø‚£ø ‚¢ü‚°û‚¢Ä‚£ø‚£ø‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£í‚£í‚£¶‚£Ñ‚£ø‚£ø‚£ø‚¢Ä‚°¨‚£ü‚£Ø  ‚£ø‚¢∑‚£º‚°ü‚¢ø‚£ø‚°ø‚£ø‚£ø  ‚°ª‚£§‚°Ä‚£ø‚£ø‚£∏‚°†‚¢î‚£í‚°í‚¢§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢æ‚£ü‚£Ö‚†â‚¢é‚£Ω‚£ø‚£ø‚°è‚°ü‚£§‚£Æ‚£ø‚£ø  ‚°è‚£ø‚†Ä‚†Ä‚£ø‚¢°‚£∑  ‚£ø‚£ü‚¢é‚£∑‚¢ª‚£ø‚£ø‚£æ‚°ü‚†â‚£Ω‚°á‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚£´‚£≠‚£≠‚£ç‚°≤‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚†ã‚£†‚°Æ‚£ª‚£ø‚£ø‚†É‚†≥‚£è‚£º‚£ø‚£ø‚£ø‚£ø‚°á‚£ø‚£¥‚£¥‚£ø‚£æ‚£ø‚£ø‚£ø‚°ø‚£Ñ‚£©‚†è‚¢∏‚£ø‚£ø‚£ø‚£ß‚°Ä‚†õ‚†û‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∫‚£≠‚£≠‚£≠‚°ù‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚¢π‚°ü‚†Å‚†Ä‚†â‚¢´‚°≥‚£µ‚£Ñ‚†Ä‚†Ä‚¢Ä‚†¥‚¢ä‚£ø‚£æ‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†ª‚£¨‚£Ω‚£ø‚£ø‚£ø‚£ø  ‚£ø‚£ø‚£ø‚£ø‚£Ø‚£µ‚†è‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ó‚¢§‚°Ä‚†Ä‚†Ä‚£†‚£ø‚¢ü‚†ü‚†â‚†Ä‚†à‚¢ª‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢è‚¢ß‚£§‚°Ä‚†Ä‚†Ä‚£á‚¢ª‚£ø‚£Ü‚¢î‚¢ï‚£µ‚†ü‚£è‚£ø‚£ø‚£ø‚†ã‚£µ‚†ö‚†Ñ‚£æ‚£ø‚£ø‚£ø‚°ø‚†ü‚£õ‚£õ‚£õ‚£õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ß‚¢∞‚†ì‚£è‚†ª‚£ø‚£ø‚£ø‚¢π‚†ª‚£ø‚£ø‚¢¶‚£∏‚£ø‚°è‚°æ‚†Ä‚†Ä‚¢†‚£§‚†é‚°º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ë‚†Ç‚†Å‚†Ä‚†Ä‚£ø‚†∏‚£ø‚¢è‚¢Ç‚£æ‚†á‚†Ä‚£ø‚£ø‚£ø‚°á‚°Ü‚†π‚¢∑‚£¥‚£ø‚°ø‚†ü‚†â‚£ê‚°Ä‚†Ñ‚£†‚°Ñ‚°†‚£Å‚°†‚†ô‚†ª‚¢ø‚£ø‚£¥‚°æ‚†É‚¢†‚¢π‚£ø‚£ø‚¢∏‚†Ä‚¢π‚£ø‚£∑‚¢π‚£ø‚¢É‚°á‚†Ä‚†Ä‚†à‚†í‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°Ä‚£ø‚¢Ä‚£ø‚£ø‚°Ä‚†Ä‚¢´‚£ø‚£ø‚£∑‚£ô‚†í‚†Ä‚†Ñ‚†ê‚†Ç‚£º‚†æ‚£µ‚†æ‚†ü‚£õ‚£õ‚†∫‚¢∑‚£Æ‚†∑‚£¢‚†ê‚†Ç‚†Ä‚†Ä‚†í‚££‚£æ‚£ø‚°ø‚°é‚†Ä‚¢†‚£ø‚£ø‚°Ñ‚£ø‚£∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ü‚£ø‚¢∏‚£ø‚£ø‚£∑‚£Ñ‚°à‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†ª‚°∑‚¢∫‚†É‚††‚†Å‚†à‚†ã‚†Ä‚†Ä‚†â‚†Å‚†ô‚°Ä‚†ò‚°ó‚£æ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢Ä‚£¥‚£ø‚£ø‚°ø‚¢É‚£Ø‚£Ω‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚°Ü‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£µ‚°û‚†Ä‚†Å‚†ê‚¢Å‚†é‚†Ñ‚£†‚†Ä‚†Ä‚°Ñ‚†Ä‚¢≥‚†à‚†Ü‚†à‚†à‚¢≥‚£Ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚£∏‚°∑‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£å‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚£†‚£¢‚†Ç‚†Ä‚¢Ç‚†å‚†Ä‚†É‚†Ä‚†Ä‚†ò‚†Ä‚¢¢‚°ë‚†Ä‚†∞‚£µ‚°Ä‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚£∞‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†≥‚£§‚£≠‚¢õ‚£ª‚†ø‚£ø‚£∑‚£∂‚¢û‚°ü‚°Å‚¢Ä‚¢Ñ‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Å‚†Ä‚†≥‚¢†‚†Ä‚¢à‚¢ø‚¢≥‚£∂‚£æ‚£ø‚†ø‚£ü‚£õ‚£Ö‚°¥‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†õ‚†ª‚†ø‚†ø‚°ü‚¢ú‚†î‚°†‚¢ä‚†î‚†Ä‚°Ü‚†Ä‚°Ü‚†Ä‚†Ä‚¢°‚¢∞‚¢†‚†Ä‚¢¢‚†±‚£å‚¢Ç‚†É‚¢ø‚†ø‚†ø‚†ü‚†õ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢§‚£ä‚°∞‚†µ‚¢∫‚†â‚†∏‚†Ä‚¢∞‚¢É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚¢∏‚†Ä‚†Ä‚°á‚°û‚°ë‚†¨‚¢Ü‚£ë‚¢§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†ò‚£æ‚°∏‚¢Ä‚°ú‚°æ‚°Ä‚°á‚†Ä‚†Ä‚°¥‚¢†‚¢ª‚¢¶‚†Ä‚¢É‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚°é‚†Ä‚†±‚°°‚†ê‚†Ä‚††‚†É‚¢¢‚†ã‚†Ä‚¢ß‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢§‚°Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
    }

    -- Îã®Ï∂ïÌÇ§ Î≤ÑÌäº
    dashboard.section.buttons.val = {
      dashboard.button("u", "Û∞ä≥ Update Plugins", ":Lazy update<CR>"),
      dashboard.button("f", "Óàï Find Files", ":Telescope find_files<CR>"),
      dashboard.button("r", "ÔÉÖ Recent Files", ":Telescope oldfiles<CR>"),
      dashboard.button("p", "Ó¨© Projects", ":Telescope projects<CR>"),
      dashboard.button("q", "Ôôô Quit", ":qa<CR>"),
    }

    -- Ìë∏ÌÑ∞ Î©îÏãúÏßÄ
    dashboard.section.footer.val = {
      "",
      "üöÄ Happy coding, ÏµúÏòÅÏùº Ïó∞Íµ¨ÏõêÎãò!",
    }

    -- Î†àÏù¥ÏïÑÏõÉ Íµ¨ÏÑ±
    dashboard.config.layout = {
      { type = "padding", val = 1 },
      dashboard.section.header,
      { type = "padding", val = 2 },
      dashboard.section.buttons,
      { type = "padding", val = 2 },
      dashboard.section.footer,
    }

    alpha.setup(dashboard.config)

    -- ÌîÑÎ°úÏ†ùÌä∏.nvim Ï¥àÍ∏∞Ìôî (ÏÑ†ÌÉù ÏÇ¨Ìï≠)
    require("project_nvim").setup {}
  end,
}


,
    -- ÌååÏùº ÌÉêÏÉâÍ∏∞

    {
        "nvim-neo-tree/neo-tree.nvim",
        dependencies = {
            "nvim-lua/plenary.nvim",
            "nvim-tree/nvim-web-devicons",
            "MunifTanjim/nui.nvim",
        },
        config = function()
            vim.keymap.set("n", "<leader>e", ":Neotree toggle<CR>")

            require("neo-tree").setup({
                window = {
                    mappings = {
                        ["v"] = "open_vsplit", -- ÏàòÏßÅ Î∂ÑÌï†Î°ú Ïó¥Í∏∞
                    }
                }
            })
        end
    }
    ,
    -- ÌçºÏßÄ ÌååÏù∏Îçî (ÏàòÏ†ï)
    {
        "nvim-telescope/telescope.nvim",
        dependencies = { "nvim-lua/plenary.nvim" },
        config = function()
            local telescope = require("telescope")
            local builtin = require("telescope.builtin")

            -- ÌîÑÎ°úÏ†ùÌä∏ ÌôïÏû• Î°úÎî©
            telescope.load_extension("projects")
            pcall(telescope.load_extension, "project")

            -- ÌÇ§Îßµ ÏÑ§Ï†ï
            vim.keymap.set("n", "<leader>ff", builtin.find_files)

            vim.keymap.set("n", "<leader>fg", function()
                builtin.live_grep({
                    default_text = vim.fn.expand("<cword>"),
                    glob_pattern = { "*.c", "*.h", "*.cpp" },
                    attach_mappings = function(_, map)
                        vim.schedule(function()
                            vim.cmd("stopinsert")
                        end)
                        return true
                    end,
                })
            end, { desc = "Live Grep with word under cursor (C/C++ only)" })

            vim.keymap.set("n", "<leader>fb", builtin.buffers)
            vim.keymap.set("n", "<leader>fp", function()
                telescope.extensions.projects.projects {}
            end, { desc = "Find Projects" })
        end,
    }

    ,

    -- Telescope project ÌôïÏû•
    {
        "nvim-telescope/telescope-project.nvim",
        config = function()
            require("telescope").load_extension("project")
        end,
    },
    -- Treesitter (Íµ¨Î¨∏ ÌïòÏù¥ÎùºÏù¥ÌåÖ)
    {
        "nvim-treesitter/nvim-treesitter",
        build = ":TSUpdate",
        config = function()
            require("nvim-treesitter.configs").setup({
                ensure_installed = { "lua", "python", "javascript", "html", "css" },
                highlight = { enable = true },
                indent = { enable = true },
            })
        end
    },
    --Í≤ÄÏÉâ Í≤∞Í≥º ÌïòÏù¥ÎùºÏù¥ÌåÖ
    {
        "kevinhwang91/nvim-hlslens",
        config = function()
            require("hlslens").setup {
                nearest_only = true, -- ÌòÑÏû¨ ÏúÑÏπòÎßå Í∞ïÏ°∞, Ïà´Ïûê Ïù∏Îç±Ïä§ Ïà®ÍπÄ
            }

            vim.cmd([[
      nnoremap n <Cmd>execute('normal! ' . v:count1 . 'n')<CR><Cmd>lua require('hlslens').start()<CR>
      nnoremap N <Cmd>execute('normal! ' . v:count1 . 'N')<CR><Cmd>lua require('hlslens').start()<CR>
      nnoremap * *<Cmd>lua require('hlslens').start()<CR>
      nnoremap # #<Cmd>lua require('hlslens').start()<CR>
      nnoremap g* g*<Cmd>lua require('hlslens').start()<CR>
      nnoremap g# g#<Cmd>lua require('hlslens').start()<CR>
    ]])
        end,
    }
    ,
    -- ÏûêÎèô Í¥ÑÌò∏/Îî∞Ïò¥Ìëú Ïåç ÏûÖÎ†•
    {
        "windwp/nvim-autopairs",
        event = "InsertEnter",
        config = function()
            require("nvim-autopairs").setup({})
        end
    },

    -- Îì§Ïó¨Ïì∞Í∏∞ Í∞ÄÏù¥ÎìúÎùºÏù∏
    {
        "lukas-reineke/indent-blankline.nvim",
        main = "ibl",
        opts = {
            scope = { enabled = true },
            indent = { char = "‚îÇ" },
            exclude = { filetypes = { "dashboard", "help", "neo-tree", "Trouble" } }
        }
    },

    -- ÏΩîÎìú Ï£ºÏÑù ÌÜ†Í∏Ä ÌîåÎü¨Í∑∏Ïù∏
    {
        "numToStr/Comment.nvim",
        config = function()
            require("Comment").setup()
        end
    },
    -- ÏÉÅÌÉúÎ∞î
    {
        "nvim-lualine/lualine.nvim",
        config = function()
            require("lualine").setup()
        end
    },

    -- nvim-cmp Í∏∞Î≥∏ ÏÑ§Ï†ï
    {
        "hrsh7th/nvim-cmp",
        dependencies = {
            "hrsh7th/cmp-nvim-lsp",
            "hrsh7th/cmp-buffer",
            "hrsh7th/cmp-path",
            "hrsh7th/cmp-cmdline",
        },
        config = function()
            local cmp = require("cmp")
            cmp.setup({
                -- ÏûêÎèôÏôÑÏÑ± Í∏∞Î≥∏ ÏÑ§Ï†ï
                sources = {
                    { name = "nvim_lsp" },
                    { name = "buffer" },
                    { name = "path" },
                },
                mapping = {
                    ['<Tab>'] = cmp.mapping.select_next_item(),
                    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
                    ['<CR>'] = cmp.mapping.confirm({ select = true }),
                    ['<C-Space>'] = cmp.mapping.complete(),
                },
            })
            -- Ïª§Îß®ÎìúÎùºÏù∏ ÏûêÎèôÏôÑÏÑ± ÏÑ§Ï†ï
            cmp.setup.cmdline(":", {
                sources = {
                    { name = "cmdline" }
                }
            })
        end
    },
    -- ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨ ÌîåÎü¨Í∑∏Ïù∏
    {
        "ahmedkhalf/project.nvim",
        config = function()
            local project = require("project_nvim")
            local util    = require("lspconfig.util") -- Ïù¥ Ï§ÑÏùÑ Ï∂îÍ∞ÄÌï©ÎãàÎã§.

            project.setup({
                manual_mode       = false,
                detection_methods = { "lsp", "pattern" },
                patterns          = {
                    ".git",
                    "Makefile",
                    "compile_commands.json",
                    "ProcessorExpert.pe", -- S32DS Ìå®ÌÑ¥ÎèÑ Ï∂îÍ∞Ä
                },
                -- (Í∑∏ Ïô∏ ÏòµÏÖò)
            })

            -- Telescope ÌîÑÎ°úÏ†ùÌä∏ ÌôïÏû• Î°úÎìú
            require("telescope").load_extension("projects")

            -- root_dir override ÏòàÏãú (ÏòµÏÖò)
            vim.api.nvim_create_autocmd("BufReadPost", {
                callback = function()
                    local root = util.root_pattern(
                        ".git",
                        "compile_commands.json",
                        "Makefile",
                        "ProcessorExpert.pe"
                    )(vim.fn.getcwd())
                    if root then
                        vim.cmd(("lcd %s"):format(root))
                    end
                end,
            })
        end,
    },
    -- noice.nvim ÏÑ§Ï†ï
    {
        "folke/noice.nvim",
        dependencies = {
            "MunifTanjim/nui.nvim",
            "rcarriga/nvim-notify",
        },
        config = function()
            require("noice").setup({
                lsp = {
                    override = {
                        ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
                        ["vim.lsp.util.stylize_markdown"] = true,
                    },
                },
                presets = {
                    command_palette = true,
                    long_message_to_split = true,
                    inc_rename = true,
                },
            })
        end
    }
}
